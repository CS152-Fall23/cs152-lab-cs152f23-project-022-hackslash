argument passed
var -> VOID
var -> INT
var -> INT
arg -> var IDENT
arg -> var []IDENT,arg
var -> INT
lh_id -> IDENT
exp -> NUM
mul_exp -> exp
add_exp -> mul_exp
rel_exp -> add_exp
assignment -> var LH_ID = rel_exp;
stmt -> assignment
var -> INT
lh_id -> IDENT
exp -> NUM
mul_exp -> exp
add_exp -> mul_exp
rel_exp -> add_exp
assignment -> var LH_ID = rel_exp;
stmt -> assignment
var -> BOOL
lh_id -> IDENT
declaration -> var LH_ID;
stmt -> declaration
assignment -> IDENT = IDENT;stmt -> assignment
exp -> IDENT
mul_exp -> exp
add_exp -> mul_exp
exp -> IDENT[add_exp]mul_exp -> exp
add_exp -> mul_exp
rel_exp -> add_exp
exp -> IDENT
mul_exp -> exp
add_exp -> mul_exp
exp -> NUM
mul_exp -> exp
add_exp -> mul_exp
add_exp -> add_exp ADD add_exp
exp -> IDENT[add_exp]mul_exp -> exp
add_exp -> mul_exp
rel_exp -> add_exp
rel -> rel_exp GREATER_THAN rel_exp
rel_exp -> rel
exp -> IDENT
mul_exp -> exp
add_exp -> mul_exp
exp -> IDENT[add_exp]mul_exp -> exp
add_exp -> mul_exp
rel_exp -> add_exp
exp -> IDENT
mul_exp -> exp
add_exp -> mul_exp
exp -> NUM
mul_exp -> exp
add_exp -> mul_exp
add_exp -> add_exp ADD add_exp
exp -> IDENT[add_exp]mul_exp -> exp
add_exp -> mul_exp
rel_exp -> add_exp
pass_arg -> rel_exp
pass_arg -> rel_exp, pass_arg
