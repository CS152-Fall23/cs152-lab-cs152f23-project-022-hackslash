Terminals unused in grammar

   VAR
   FUNC
   SEMI


State 0 conflicts: 13 shift/reduce, 1 reduce/reduce
State 15 conflicts: 13 shift/reduce, 1 reduce/reduce
State 28 conflicts: 13 shift/reduce
State 30 conflicts: 13 shift/reduce, 15 reduce/reduce
State 45 conflicts: 14 shift/reduce
State 67 conflicts: 15 reduce/reduce
State 71 conflicts: 13 shift/reduce
State 82 conflicts: 13 shift/reduce
State 86 conflicts: 14 shift/reduce
State 87 conflicts: 14 shift/reduce
State 89 conflicts: 13 shift/reduce
State 94 conflicts: 14 shift/reduce
State 102 conflicts: 13 shift/reduce
State 104 conflicts: 14 shift/reduce
State 107 conflicts: 13 shift/reduce
State 108 conflicts: 14 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | stmt

    3 stmt: stmt stmt
    4     | assignment
    5     | function
    6     | break
    7     | read_write_stmt
    8     | if_stmt
    9     | while_stmt
   10     | %empty

   11 assignment: var LH_ID
   12           | var LH_ID EQL rel_exp
   13           | var LH_ID EQL IDENT

   14 function: var IDENT L_SQUARE arg R_SQUARE L_CURLY stmt R_CURLY

   15 arg: var IDENT
   16    | var IDENT COMMA arg

   17 break: BREAK

   18 read_write_stmt: IN IDENT
   19                | OUT IDENT
   20                | PRINT L_SQUARE IDENT R_SQUARE

   21 if_stmt: IF L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY elseif

   22 while_stmt: WHILE L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY
   23           | DO L_CURLY stmt R_CURLY WHILE L_SQUARE exp R_SQUARE

   24 elseif: ELSE L_CURLY stmt R_CURLY
   25       | ELIF L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY elseif

   26 rel_exp: IDENT
   27        | add_exp
   28        | rel

   29 add_exp: mul_exp
   30        | add_exp ADD add_exp
   31        | add_exp SUB add_exp

   32 mul_exp: exp
   33        | mul_exp MUL mul_exp
   34        | mul_exp DIV mul_exp

   35 exp: NUM
   36    | SUB exp
   37    | L_PAREN add_exp R_PAREN

   38 rel: rel_exp LESS_THAN rel_exp
   39    | rel_exp GREATER_THAN rel_exp
   40    | rel_exp EQUAL_TO rel_exp
   41    | rel_exp LESS_EQUAL_TO rel_exp
   42    | rel_exp GREATER_EQUAL_TO rel_exp
   43    | rel_exp NOT_EQUAL_TO rel_exp
   44    | L_SQUARE add_exp R_SQUARE

   45 var: INT
   46    | STRING
   47    | DOUBLE
   48    | CHAR
   49    | BOOL
   50    | VOID


Terminals, with rules where they appear

$end (0) 0
error (256)
VAR (258)
FUNC (259)
NUM (260) 35
IDENT (261) 13 14 15 16 18 19 20 26
L_CURLY (262) 14 21 22 23 24 25
L_PAREN (263) 37
L_SQUARE (264) 14 20 21 22 23 25 44
R_CURLY (265) 14 21 22 23 24 25
R_PAREN (266) 37
R_SQUARE (267) 14 20 21 22 23 25 44
COMMA (268) 16
SEMI (269)
BREAK (270) 17
IF (271) 21
ELIF (272) 25
ELSE (273) 24
IN (274) 18
OUT (275) 19
PRINT (276) 20
WHILE (277) 22 23
DO (278) 23
LH_ID (279) 11 12 13
INT (280) 45
STRING (281) 46
CHAR (282) 48
DOUBLE (283) 47
BOOL (284) 49
VOID (285) 50
ADD (286) 30
SUB (287) 31 36
MUL (288) 33
DIV (289) 34
LESS_THAN (290) 38
GREATER_THAN (291) 39
EQUAL_TO (292) 40
LESS_EQUAL_TO (293) 41
GREATER_EQUAL_TO (294) 42
NOT_EQUAL_TO (295) 43
EQL (296) 12 13


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1 2, on right: 0
stmt (44)
    on left: 3 4 5 6 7 8 9 10, on right: 2 3 14 21 22 23 24 25
assignment (45)
    on left: 11 12 13, on right: 4
function (46)
    on left: 14, on right: 5
arg (47)
    on left: 15 16, on right: 14 16
break (48)
    on left: 17, on right: 6
read_write_stmt (49)
    on left: 18 19 20, on right: 7
if_stmt (50)
    on left: 21, on right: 8
while_stmt (51)
    on left: 22 23, on right: 9
elseif (52)
    on left: 24 25, on right: 21 25
rel_exp (53)
    on left: 26 27 28, on right: 12 21 22 25 38 39 40 41 42 43
add_exp (54)
    on left: 29 30 31, on right: 27 30 31 37 44
mul_exp (55)
    on left: 32 33 34, on right: 29 33 34
exp (56)
    on left: 35 36 37, on right: 23 32 36
rel (57)
    on left: 38 39 40 41 42 43 44, on right: 28
var (58)
    on left: 45 46 47 48 49 50, on right: 11 12 13 14 15 16


State 0

    0 $accept: . program $end

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    $end      reduce using rule 1 (program)
    $end      [reduce using rule 10 (stmt)]
    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 1 (program)

    program          go to state 14
    stmt             go to state 15
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 1

   17 break: BREAK .

    $default  reduce using rule 17 (break)


State 2

   21 if_stmt: IF . L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY elseif

    L_SQUARE  shift, and go to state 23


State 3

   18 read_write_stmt: IN . IDENT

    IDENT  shift, and go to state 24


State 4

   19 read_write_stmt: OUT . IDENT

    IDENT  shift, and go to state 25


State 5

   20 read_write_stmt: PRINT . L_SQUARE IDENT R_SQUARE

    L_SQUARE  shift, and go to state 26


State 6

   22 while_stmt: WHILE . L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY

    L_SQUARE  shift, and go to state 27


State 7

   23 while_stmt: DO . L_CURLY stmt R_CURLY WHILE L_SQUARE exp R_SQUARE

    L_CURLY  shift, and go to state 28


State 8

   45 var: INT .

    $default  reduce using rule 45 (var)


State 9

   46 var: STRING .

    $default  reduce using rule 46 (var)


State 10

   48 var: CHAR .

    $default  reduce using rule 48 (var)


State 11

   47 var: DOUBLE .

    $default  reduce using rule 47 (var)


State 12

   49 var: BOOL .

    $default  reduce using rule 49 (var)


State 13

   50 var: VOID .

    $default  reduce using rule 50 (var)


State 14

    0 $accept: program . $end

    $end  shift, and go to state 29


State 15

    2 program: stmt .
    3 stmt: stmt . stmt

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    $end      reduce using rule 2 (program)
    $end      [reduce using rule 10 (stmt)]
    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 2 (program)

    stmt             go to state 30
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 16

    4 stmt: assignment .

    $default  reduce using rule 4 (stmt)


State 17

    5 stmt: function .

    $default  reduce using rule 5 (stmt)


State 18

    6 stmt: break .

    $default  reduce using rule 6 (stmt)


State 19

    7 stmt: read_write_stmt .

    $default  reduce using rule 7 (stmt)


State 20

    8 stmt: if_stmt .

    $default  reduce using rule 8 (stmt)


State 21

    9 stmt: while_stmt .

    $default  reduce using rule 9 (stmt)


State 22

   11 assignment: var . LH_ID
   12           | var . LH_ID EQL rel_exp
   13           | var . LH_ID EQL IDENT
   14 function: var . IDENT L_SQUARE arg R_SQUARE L_CURLY stmt R_CURLY

    IDENT  shift, and go to state 31
    LH_ID  shift, and go to state 32


State 23

   21 if_stmt: IF L_SQUARE . rel_exp R_SQUARE L_CURLY stmt R_CURLY elseif

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 38
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 24

   18 read_write_stmt: IN IDENT .

    $default  reduce using rule 18 (read_write_stmt)


State 25

   19 read_write_stmt: OUT IDENT .

    $default  reduce using rule 19 (read_write_stmt)


State 26

   20 read_write_stmt: PRINT L_SQUARE . IDENT R_SQUARE

    IDENT  shift, and go to state 43


State 27

   22 while_stmt: WHILE L_SQUARE . rel_exp R_SQUARE L_CURLY stmt R_CURLY

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 44
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 28

   23 while_stmt: DO L_CURLY . stmt R_CURLY WHILE L_SQUARE exp R_SQUARE

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 10 (stmt)

    stmt             go to state 45
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 29

    0 $accept: program $end .

    $default  accept


State 30

    3 stmt: stmt . stmt
    3     | stmt stmt .

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    $end      reduce using rule 3 (stmt)
    $end      [reduce using rule 10 (stmt)]
    R_CURLY   reduce using rule 3 (stmt)
    R_CURLY   [reduce using rule 10 (stmt)]
    BREAK     [reduce using rule 3 (stmt)]
    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 3 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 3 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 3 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 3 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 3 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 3 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 3 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 3 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 3 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 3 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 3 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 3 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 3 (stmt)

    stmt             go to state 30
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 31

   14 function: var IDENT . L_SQUARE arg R_SQUARE L_CURLY stmt R_CURLY

    L_SQUARE  shift, and go to state 46


State 32

   11 assignment: var LH_ID .
   12           | var LH_ID . EQL rel_exp
   13           | var LH_ID . EQL IDENT

    EQL  shift, and go to state 47

    $default  reduce using rule 11 (assignment)


State 33

   35 exp: NUM .

    $default  reduce using rule 35 (exp)


State 34

   26 rel_exp: IDENT .

    $default  reduce using rule 26 (rel_exp)


State 35

   37 exp: L_PAREN . add_exp R_PAREN

    NUM      shift, and go to state 33
    L_PAREN  shift, and go to state 35
    SUB      shift, and go to state 37

    add_exp  go to state 48
    mul_exp  go to state 40
    exp      go to state 41


State 36

   44 rel: L_SQUARE . add_exp R_SQUARE

    NUM      shift, and go to state 33
    L_PAREN  shift, and go to state 35
    SUB      shift, and go to state 37

    add_exp  go to state 49
    mul_exp  go to state 40
    exp      go to state 41


State 37

   36 exp: SUB . exp

    NUM      shift, and go to state 33
    L_PAREN  shift, and go to state 35
    SUB      shift, and go to state 37

    exp  go to state 50


State 38

   21 if_stmt: IF L_SQUARE rel_exp . R_SQUARE L_CURLY stmt R_CURLY elseif
   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    R_SQUARE          shift, and go to state 51
    LESS_THAN         shift, and go to state 52
    GREATER_THAN      shift, and go to state 53
    EQUAL_TO          shift, and go to state 54
    LESS_EQUAL_TO     shift, and go to state 55
    GREATER_EQUAL_TO  shift, and go to state 56
    NOT_EQUAL_TO      shift, and go to state 57


State 39

   27 rel_exp: add_exp .
   30 add_exp: add_exp . ADD add_exp
   31        | add_exp . SUB add_exp

    ADD  shift, and go to state 58
    SUB  shift, and go to state 59

    $default  reduce using rule 27 (rel_exp)


State 40

   29 add_exp: mul_exp .
   33 mul_exp: mul_exp . MUL mul_exp
   34        | mul_exp . DIV mul_exp

    MUL  shift, and go to state 60
    DIV  shift, and go to state 61

    $default  reduce using rule 29 (add_exp)


State 41

   32 mul_exp: exp .

    $default  reduce using rule 32 (mul_exp)


State 42

   28 rel_exp: rel .

    $default  reduce using rule 28 (rel_exp)


State 43

   20 read_write_stmt: PRINT L_SQUARE IDENT . R_SQUARE

    R_SQUARE  shift, and go to state 62


State 44

   22 while_stmt: WHILE L_SQUARE rel_exp . R_SQUARE L_CURLY stmt R_CURLY
   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    R_SQUARE          shift, and go to state 63
    LESS_THAN         shift, and go to state 52
    GREATER_THAN      shift, and go to state 53
    EQUAL_TO          shift, and go to state 54
    LESS_EQUAL_TO     shift, and go to state 55
    GREATER_EQUAL_TO  shift, and go to state 56
    NOT_EQUAL_TO      shift, and go to state 57


State 45

    3 stmt: stmt . stmt
   23 while_stmt: DO L_CURLY stmt . R_CURLY WHILE L_SQUARE exp R_SQUARE

    R_CURLY  shift, and go to state 64
    BREAK    shift, and go to state 1
    IF       shift, and go to state 2
    IN       shift, and go to state 3
    OUT      shift, and go to state 4
    PRINT    shift, and go to state 5
    WHILE    shift, and go to state 6
    DO       shift, and go to state 7
    INT      shift, and go to state 8
    STRING   shift, and go to state 9
    CHAR     shift, and go to state 10
    DOUBLE   shift, and go to state 11
    BOOL     shift, and go to state 12
    VOID     shift, and go to state 13

    R_CURLY  [reduce using rule 10 (stmt)]
    BREAK    [reduce using rule 10 (stmt)]
    IF       [reduce using rule 10 (stmt)]
    IN       [reduce using rule 10 (stmt)]
    OUT      [reduce using rule 10 (stmt)]
    PRINT    [reduce using rule 10 (stmt)]
    WHILE    [reduce using rule 10 (stmt)]
    DO       [reduce using rule 10 (stmt)]
    INT      [reduce using rule 10 (stmt)]
    STRING   [reduce using rule 10 (stmt)]
    CHAR     [reduce using rule 10 (stmt)]
    DOUBLE   [reduce using rule 10 (stmt)]
    BOOL     [reduce using rule 10 (stmt)]
    VOID     [reduce using rule 10 (stmt)]

    stmt             go to state 30
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 46

   14 function: var IDENT L_SQUARE . arg R_SQUARE L_CURLY stmt R_CURLY

    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    arg  go to state 65
    var  go to state 66


State 47

   12 assignment: var LH_ID EQL . rel_exp
   13           | var LH_ID EQL . IDENT

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 67
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 68
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 48

   30 add_exp: add_exp . ADD add_exp
   31        | add_exp . SUB add_exp
   37 exp: L_PAREN add_exp . R_PAREN

    R_PAREN  shift, and go to state 69
    ADD      shift, and go to state 58
    SUB      shift, and go to state 59


State 49

   30 add_exp: add_exp . ADD add_exp
   31        | add_exp . SUB add_exp
   44 rel: L_SQUARE add_exp . R_SQUARE

    R_SQUARE  shift, and go to state 70
    ADD       shift, and go to state 58
    SUB       shift, and go to state 59


State 50

   36 exp: SUB exp .

    $default  reduce using rule 36 (exp)


State 51

   21 if_stmt: IF L_SQUARE rel_exp R_SQUARE . L_CURLY stmt R_CURLY elseif

    L_CURLY  shift, and go to state 71


State 52

   38 rel: rel_exp LESS_THAN . rel_exp

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 72
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 53

   39 rel: rel_exp GREATER_THAN . rel_exp

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 73
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 54

   40 rel: rel_exp EQUAL_TO . rel_exp

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 74
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 55

   41 rel: rel_exp LESS_EQUAL_TO . rel_exp

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 75
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 56

   42 rel: rel_exp GREATER_EQUAL_TO . rel_exp

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 76
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 57

   43 rel: rel_exp NOT_EQUAL_TO . rel_exp

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 77
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 58

   30 add_exp: add_exp ADD . add_exp

    NUM      shift, and go to state 33
    L_PAREN  shift, and go to state 35
    SUB      shift, and go to state 37

    add_exp  go to state 78
    mul_exp  go to state 40
    exp      go to state 41


State 59

   31 add_exp: add_exp SUB . add_exp

    NUM      shift, and go to state 33
    L_PAREN  shift, and go to state 35
    SUB      shift, and go to state 37

    add_exp  go to state 79
    mul_exp  go to state 40
    exp      go to state 41


State 60

   33 mul_exp: mul_exp MUL . mul_exp

    NUM      shift, and go to state 33
    L_PAREN  shift, and go to state 35
    SUB      shift, and go to state 37

    mul_exp  go to state 80
    exp      go to state 41


State 61

   34 mul_exp: mul_exp DIV . mul_exp

    NUM      shift, and go to state 33
    L_PAREN  shift, and go to state 35
    SUB      shift, and go to state 37

    mul_exp  go to state 81
    exp      go to state 41


State 62

   20 read_write_stmt: PRINT L_SQUARE IDENT R_SQUARE .

    $default  reduce using rule 20 (read_write_stmt)


State 63

   22 while_stmt: WHILE L_SQUARE rel_exp R_SQUARE . L_CURLY stmt R_CURLY

    L_CURLY  shift, and go to state 82


State 64

   23 while_stmt: DO L_CURLY stmt R_CURLY . WHILE L_SQUARE exp R_SQUARE

    WHILE  shift, and go to state 83


State 65

   14 function: var IDENT L_SQUARE arg . R_SQUARE L_CURLY stmt R_CURLY

    R_SQUARE  shift, and go to state 84


State 66

   15 arg: var . IDENT
   16    | var . IDENT COMMA arg

    IDENT  shift, and go to state 85


State 67

   13 assignment: var LH_ID EQL IDENT .
   26 rel_exp: IDENT .

    $end              reduce using rule 13 (assignment)
    $end              [reduce using rule 26 (rel_exp)]
    R_CURLY           reduce using rule 13 (assignment)
    R_CURLY           [reduce using rule 26 (rel_exp)]
    BREAK             reduce using rule 13 (assignment)
    BREAK             [reduce using rule 26 (rel_exp)]
    IF                reduce using rule 13 (assignment)
    IF                [reduce using rule 26 (rel_exp)]
    IN                reduce using rule 13 (assignment)
    IN                [reduce using rule 26 (rel_exp)]
    OUT               reduce using rule 13 (assignment)
    OUT               [reduce using rule 26 (rel_exp)]
    PRINT             reduce using rule 13 (assignment)
    PRINT             [reduce using rule 26 (rel_exp)]
    WHILE             reduce using rule 13 (assignment)
    WHILE             [reduce using rule 26 (rel_exp)]
    DO                reduce using rule 13 (assignment)
    DO                [reduce using rule 26 (rel_exp)]
    INT               reduce using rule 13 (assignment)
    INT               [reduce using rule 26 (rel_exp)]
    STRING            reduce using rule 13 (assignment)
    STRING            [reduce using rule 26 (rel_exp)]
    CHAR              reduce using rule 13 (assignment)
    CHAR              [reduce using rule 26 (rel_exp)]
    DOUBLE            reduce using rule 13 (assignment)
    DOUBLE            [reduce using rule 26 (rel_exp)]
    BOOL              reduce using rule 13 (assignment)
    BOOL              [reduce using rule 26 (rel_exp)]
    VOID              reduce using rule 13 (assignment)
    VOID              [reduce using rule 26 (rel_exp)]
    LESS_THAN         reduce using rule 26 (rel_exp)
    GREATER_THAN      reduce using rule 26 (rel_exp)
    EQUAL_TO          reduce using rule 26 (rel_exp)
    LESS_EQUAL_TO     reduce using rule 26 (rel_exp)
    GREATER_EQUAL_TO  reduce using rule 26 (rel_exp)
    NOT_EQUAL_TO      reduce using rule 26 (rel_exp)
    $default          reduce using rule 13 (assignment)


State 68

   12 assignment: var LH_ID EQL rel_exp .
   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    LESS_THAN         shift, and go to state 52
    GREATER_THAN      shift, and go to state 53
    EQUAL_TO          shift, and go to state 54
    LESS_EQUAL_TO     shift, and go to state 55
    GREATER_EQUAL_TO  shift, and go to state 56
    NOT_EQUAL_TO      shift, and go to state 57

    $default  reduce using rule 12 (assignment)


State 69

   37 exp: L_PAREN add_exp R_PAREN .

    $default  reduce using rule 37 (exp)


State 70

   44 rel: L_SQUARE add_exp R_SQUARE .

    $default  reduce using rule 44 (rel)


State 71

   21 if_stmt: IF L_SQUARE rel_exp R_SQUARE L_CURLY . stmt R_CURLY elseif

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 10 (stmt)

    stmt             go to state 86
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 72

   38 rel: rel_exp . LESS_THAN rel_exp
   38    | rel_exp LESS_THAN rel_exp .
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    $default  reduce using rule 38 (rel)


State 73

   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   39    | rel_exp GREATER_THAN rel_exp .
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    $default  reduce using rule 39 (rel)


State 74

   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   40    | rel_exp EQUAL_TO rel_exp .
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    $default  reduce using rule 40 (rel)


State 75

   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   41    | rel_exp LESS_EQUAL_TO rel_exp .
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    $default  reduce using rule 41 (rel)


State 76

   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   42    | rel_exp GREATER_EQUAL_TO rel_exp .
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    $default  reduce using rule 42 (rel)


State 77

   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp
   43    | rel_exp NOT_EQUAL_TO rel_exp .

    $default  reduce using rule 43 (rel)


State 78

   30 add_exp: add_exp . ADD add_exp
   30        | add_exp ADD add_exp .
   31        | add_exp . SUB add_exp

    $default  reduce using rule 30 (add_exp)


State 79

   30 add_exp: add_exp . ADD add_exp
   31        | add_exp . SUB add_exp
   31        | add_exp SUB add_exp .

    $default  reduce using rule 31 (add_exp)


State 80

   33 mul_exp: mul_exp . MUL mul_exp
   33        | mul_exp MUL mul_exp .
   34        | mul_exp . DIV mul_exp

    $default  reduce using rule 33 (mul_exp)


State 81

   33 mul_exp: mul_exp . MUL mul_exp
   34        | mul_exp . DIV mul_exp
   34        | mul_exp DIV mul_exp .

    $default  reduce using rule 34 (mul_exp)


State 82

   22 while_stmt: WHILE L_SQUARE rel_exp R_SQUARE L_CURLY . stmt R_CURLY

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 10 (stmt)

    stmt             go to state 87
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 83

   23 while_stmt: DO L_CURLY stmt R_CURLY WHILE . L_SQUARE exp R_SQUARE

    L_SQUARE  shift, and go to state 88


State 84

   14 function: var IDENT L_SQUARE arg R_SQUARE . L_CURLY stmt R_CURLY

    L_CURLY  shift, and go to state 89


State 85

   15 arg: var IDENT .
   16    | var IDENT . COMMA arg

    COMMA  shift, and go to state 90

    $default  reduce using rule 15 (arg)


State 86

    3 stmt: stmt . stmt
   21 if_stmt: IF L_SQUARE rel_exp R_SQUARE L_CURLY stmt . R_CURLY elseif

    R_CURLY  shift, and go to state 91
    BREAK    shift, and go to state 1
    IF       shift, and go to state 2
    IN       shift, and go to state 3
    OUT      shift, and go to state 4
    PRINT    shift, and go to state 5
    WHILE    shift, and go to state 6
    DO       shift, and go to state 7
    INT      shift, and go to state 8
    STRING   shift, and go to state 9
    CHAR     shift, and go to state 10
    DOUBLE   shift, and go to state 11
    BOOL     shift, and go to state 12
    VOID     shift, and go to state 13

    R_CURLY  [reduce using rule 10 (stmt)]
    BREAK    [reduce using rule 10 (stmt)]
    IF       [reduce using rule 10 (stmt)]
    IN       [reduce using rule 10 (stmt)]
    OUT      [reduce using rule 10 (stmt)]
    PRINT    [reduce using rule 10 (stmt)]
    WHILE    [reduce using rule 10 (stmt)]
    DO       [reduce using rule 10 (stmt)]
    INT      [reduce using rule 10 (stmt)]
    STRING   [reduce using rule 10 (stmt)]
    CHAR     [reduce using rule 10 (stmt)]
    DOUBLE   [reduce using rule 10 (stmt)]
    BOOL     [reduce using rule 10 (stmt)]
    VOID     [reduce using rule 10 (stmt)]

    stmt             go to state 30
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 87

    3 stmt: stmt . stmt
   22 while_stmt: WHILE L_SQUARE rel_exp R_SQUARE L_CURLY stmt . R_CURLY

    R_CURLY  shift, and go to state 92
    BREAK    shift, and go to state 1
    IF       shift, and go to state 2
    IN       shift, and go to state 3
    OUT      shift, and go to state 4
    PRINT    shift, and go to state 5
    WHILE    shift, and go to state 6
    DO       shift, and go to state 7
    INT      shift, and go to state 8
    STRING   shift, and go to state 9
    CHAR     shift, and go to state 10
    DOUBLE   shift, and go to state 11
    BOOL     shift, and go to state 12
    VOID     shift, and go to state 13

    R_CURLY  [reduce using rule 10 (stmt)]
    BREAK    [reduce using rule 10 (stmt)]
    IF       [reduce using rule 10 (stmt)]
    IN       [reduce using rule 10 (stmt)]
    OUT      [reduce using rule 10 (stmt)]
    PRINT    [reduce using rule 10 (stmt)]
    WHILE    [reduce using rule 10 (stmt)]
    DO       [reduce using rule 10 (stmt)]
    INT      [reduce using rule 10 (stmt)]
    STRING   [reduce using rule 10 (stmt)]
    CHAR     [reduce using rule 10 (stmt)]
    DOUBLE   [reduce using rule 10 (stmt)]
    BOOL     [reduce using rule 10 (stmt)]
    VOID     [reduce using rule 10 (stmt)]

    stmt             go to state 30
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 88

   23 while_stmt: DO L_CURLY stmt R_CURLY WHILE L_SQUARE . exp R_SQUARE

    NUM      shift, and go to state 33
    L_PAREN  shift, and go to state 35
    SUB      shift, and go to state 37

    exp  go to state 93


State 89

   14 function: var IDENT L_SQUARE arg R_SQUARE L_CURLY . stmt R_CURLY

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 10 (stmt)

    stmt             go to state 94
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 90

   16 arg: var IDENT COMMA . arg

    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    arg  go to state 95
    var  go to state 66


State 91

   21 if_stmt: IF L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY . elseif

    ELIF  shift, and go to state 96
    ELSE  shift, and go to state 97

    elseif  go to state 98


State 92

   22 while_stmt: WHILE L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY .

    $default  reduce using rule 22 (while_stmt)


State 93

   23 while_stmt: DO L_CURLY stmt R_CURLY WHILE L_SQUARE exp . R_SQUARE

    R_SQUARE  shift, and go to state 99


State 94

    3 stmt: stmt . stmt
   14 function: var IDENT L_SQUARE arg R_SQUARE L_CURLY stmt . R_CURLY

    R_CURLY  shift, and go to state 100
    BREAK    shift, and go to state 1
    IF       shift, and go to state 2
    IN       shift, and go to state 3
    OUT      shift, and go to state 4
    PRINT    shift, and go to state 5
    WHILE    shift, and go to state 6
    DO       shift, and go to state 7
    INT      shift, and go to state 8
    STRING   shift, and go to state 9
    CHAR     shift, and go to state 10
    DOUBLE   shift, and go to state 11
    BOOL     shift, and go to state 12
    VOID     shift, and go to state 13

    R_CURLY  [reduce using rule 10 (stmt)]
    BREAK    [reduce using rule 10 (stmt)]
    IF       [reduce using rule 10 (stmt)]
    IN       [reduce using rule 10 (stmt)]
    OUT      [reduce using rule 10 (stmt)]
    PRINT    [reduce using rule 10 (stmt)]
    WHILE    [reduce using rule 10 (stmt)]
    DO       [reduce using rule 10 (stmt)]
    INT      [reduce using rule 10 (stmt)]
    STRING   [reduce using rule 10 (stmt)]
    CHAR     [reduce using rule 10 (stmt)]
    DOUBLE   [reduce using rule 10 (stmt)]
    BOOL     [reduce using rule 10 (stmt)]
    VOID     [reduce using rule 10 (stmt)]

    stmt             go to state 30
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 95

   16 arg: var IDENT COMMA arg .

    $default  reduce using rule 16 (arg)


State 96

   25 elseif: ELIF . L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY elseif

    L_SQUARE  shift, and go to state 101


State 97

   24 elseif: ELSE . L_CURLY stmt R_CURLY

    L_CURLY  shift, and go to state 102


State 98

   21 if_stmt: IF L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY elseif .

    $default  reduce using rule 21 (if_stmt)


State 99

   23 while_stmt: DO L_CURLY stmt R_CURLY WHILE L_SQUARE exp R_SQUARE .

    $default  reduce using rule 23 (while_stmt)


State 100

   14 function: var IDENT L_SQUARE arg R_SQUARE L_CURLY stmt R_CURLY .

    $default  reduce using rule 14 (function)


State 101

   25 elseif: ELIF L_SQUARE . rel_exp R_SQUARE L_CURLY stmt R_CURLY elseif

    NUM       shift, and go to state 33
    IDENT     shift, and go to state 34
    L_PAREN   shift, and go to state 35
    L_SQUARE  shift, and go to state 36
    SUB       shift, and go to state 37

    rel_exp  go to state 103
    add_exp  go to state 39
    mul_exp  go to state 40
    exp      go to state 41
    rel      go to state 42


State 102

   24 elseif: ELSE L_CURLY . stmt R_CURLY

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 10 (stmt)

    stmt             go to state 104
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 103

   25 elseif: ELIF L_SQUARE rel_exp . R_SQUARE L_CURLY stmt R_CURLY elseif
   38 rel: rel_exp . LESS_THAN rel_exp
   39    | rel_exp . GREATER_THAN rel_exp
   40    | rel_exp . EQUAL_TO rel_exp
   41    | rel_exp . LESS_EQUAL_TO rel_exp
   42    | rel_exp . GREATER_EQUAL_TO rel_exp
   43    | rel_exp . NOT_EQUAL_TO rel_exp

    R_SQUARE          shift, and go to state 105
    LESS_THAN         shift, and go to state 52
    GREATER_THAN      shift, and go to state 53
    EQUAL_TO          shift, and go to state 54
    LESS_EQUAL_TO     shift, and go to state 55
    GREATER_EQUAL_TO  shift, and go to state 56
    NOT_EQUAL_TO      shift, and go to state 57


State 104

    3 stmt: stmt . stmt
   24 elseif: ELSE L_CURLY stmt . R_CURLY

    R_CURLY  shift, and go to state 106
    BREAK    shift, and go to state 1
    IF       shift, and go to state 2
    IN       shift, and go to state 3
    OUT      shift, and go to state 4
    PRINT    shift, and go to state 5
    WHILE    shift, and go to state 6
    DO       shift, and go to state 7
    INT      shift, and go to state 8
    STRING   shift, and go to state 9
    CHAR     shift, and go to state 10
    DOUBLE   shift, and go to state 11
    BOOL     shift, and go to state 12
    VOID     shift, and go to state 13

    R_CURLY  [reduce using rule 10 (stmt)]
    BREAK    [reduce using rule 10 (stmt)]
    IF       [reduce using rule 10 (stmt)]
    IN       [reduce using rule 10 (stmt)]
    OUT      [reduce using rule 10 (stmt)]
    PRINT    [reduce using rule 10 (stmt)]
    WHILE    [reduce using rule 10 (stmt)]
    DO       [reduce using rule 10 (stmt)]
    INT      [reduce using rule 10 (stmt)]
    STRING   [reduce using rule 10 (stmt)]
    CHAR     [reduce using rule 10 (stmt)]
    DOUBLE   [reduce using rule 10 (stmt)]
    BOOL     [reduce using rule 10 (stmt)]
    VOID     [reduce using rule 10 (stmt)]

    stmt             go to state 30
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 105

   25 elseif: ELIF L_SQUARE rel_exp R_SQUARE . L_CURLY stmt R_CURLY elseif

    L_CURLY  shift, and go to state 107


State 106

   24 elseif: ELSE L_CURLY stmt R_CURLY .

    $default  reduce using rule 24 (elseif)


State 107

   25 elseif: ELIF L_SQUARE rel_exp R_SQUARE L_CURLY . stmt R_CURLY elseif

    BREAK   shift, and go to state 1
    IF      shift, and go to state 2
    IN      shift, and go to state 3
    OUT     shift, and go to state 4
    PRINT   shift, and go to state 5
    WHILE   shift, and go to state 6
    DO      shift, and go to state 7
    INT     shift, and go to state 8
    STRING  shift, and go to state 9
    CHAR    shift, and go to state 10
    DOUBLE  shift, and go to state 11
    BOOL    shift, and go to state 12
    VOID    shift, and go to state 13

    BREAK     [reduce using rule 10 (stmt)]
    IF        [reduce using rule 10 (stmt)]
    IN        [reduce using rule 10 (stmt)]
    OUT       [reduce using rule 10 (stmt)]
    PRINT     [reduce using rule 10 (stmt)]
    WHILE     [reduce using rule 10 (stmt)]
    DO        [reduce using rule 10 (stmt)]
    INT       [reduce using rule 10 (stmt)]
    STRING    [reduce using rule 10 (stmt)]
    CHAR      [reduce using rule 10 (stmt)]
    DOUBLE    [reduce using rule 10 (stmt)]
    BOOL      [reduce using rule 10 (stmt)]
    VOID      [reduce using rule 10 (stmt)]
    $default  reduce using rule 10 (stmt)

    stmt             go to state 108
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 108

    3 stmt: stmt . stmt
   25 elseif: ELIF L_SQUARE rel_exp R_SQUARE L_CURLY stmt . R_CURLY elseif

    R_CURLY  shift, and go to state 109
    BREAK    shift, and go to state 1
    IF       shift, and go to state 2
    IN       shift, and go to state 3
    OUT      shift, and go to state 4
    PRINT    shift, and go to state 5
    WHILE    shift, and go to state 6
    DO       shift, and go to state 7
    INT      shift, and go to state 8
    STRING   shift, and go to state 9
    CHAR     shift, and go to state 10
    DOUBLE   shift, and go to state 11
    BOOL     shift, and go to state 12
    VOID     shift, and go to state 13

    R_CURLY  [reduce using rule 10 (stmt)]
    BREAK    [reduce using rule 10 (stmt)]
    IF       [reduce using rule 10 (stmt)]
    IN       [reduce using rule 10 (stmt)]
    OUT      [reduce using rule 10 (stmt)]
    PRINT    [reduce using rule 10 (stmt)]
    WHILE    [reduce using rule 10 (stmt)]
    DO       [reduce using rule 10 (stmt)]
    INT      [reduce using rule 10 (stmt)]
    STRING   [reduce using rule 10 (stmt)]
    CHAR     [reduce using rule 10 (stmt)]
    DOUBLE   [reduce using rule 10 (stmt)]
    BOOL     [reduce using rule 10 (stmt)]
    VOID     [reduce using rule 10 (stmt)]

    stmt             go to state 30
    assignment       go to state 16
    function         go to state 17
    break            go to state 18
    read_write_stmt  go to state 19
    if_stmt          go to state 20
    while_stmt       go to state 21
    var              go to state 22


State 109

   25 elseif: ELIF L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY . elseif

    ELIF  shift, and go to state 96
    ELSE  shift, and go to state 97

    elseif  go to state 110


State 110

   25 elseif: ELIF L_SQUARE rel_exp R_SQUARE L_CURLY stmt R_CURLY elseif .

    $default  reduce using rule 25 (elseif)
